{"ast":null,"code":"var _jsxFileName = \"C:\\\\PROYECTOS\\\\VisualStudioNET\\\\WEBREACTCONTACTOS\\\\webreactcontactos\\\\src\\\\componentes\\\\Contactos.js\";\nimport React, { Component } from 'react';\nimport { Label, FormGroup, Input, Modal, ModalHeader, ModalBody, ModalFooter, Table, Button } from 'reactstrap';\nimport { Link, Redirect } from 'react-router-dom';\nimport axios from 'axios';\nimport { confirmAlert } from 'react-confirm-alert';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport AlertaError from './AlertaError';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\n/*import Navegacion from './Navegacion';*/\n//Una Clase que extiende del component de React se comvierte en una etiqueta html\n\nclass Contactos extends Component {\n  constructor(props) {\n    super(props);\n    const token = localStorage.getItem(\"token\");\n    let loggedIn = true;\n\n    if (token == null) {\n      loggedIn = false;\n    }\n\n    this.state = {\n      loading: false,\n      contactos: [],\n      isError: '',\n      isNullNombre: '',\n      isNullCelular: '',\n      isNullSexo: '',\n      alert_message: '',\n      datosNuevoContacto: {\n        Nombre: '',\n        Celular: '',\n        Sexo: ''\n      },\n      datosEditarContacto: {\n        Id: '',\n        Nombre: '',\n        Celular: '',\n        Sexo: ''\n      },\n      nuevoContactoModal: false,\n      editarContactoModal: false,\n      loggedIn\n    };\n  } //Se declara en el objeto state las variables que mantendran el valor\n  //Contactos - Los datos que llenaran el Table\n  //datosNuevoContacto - Los datos para la Alta\n  //datosEditarContacto - Los datos para la modificación\n  //nuevoContactoModal - Para la visualización y cierre de la ventana modal de Alta\n  //editarContactoModal - Para la visualización  y cierre de la ventana modal de modificación\n  //Método que refrescara el Table\n\n\n  componentWillMount() {\n    this.refrescarContactos();\n  } //Método que niega el valor de la variable nuevoContactoModal inicializada en false, esto\n  //permite mostrar el Modal para la Alta y inicializa los datos del objeto datosNuevoContacto, y\n  //Se regresa el valor de la variable nuevoContactoModal a false cuando se pulsa el botón de cerrar y\n  //cuando se pulsa el botón de cancelar\n\n\n  toggleNuevoContactoModal() {\n    this.setState({\n      isError: '',\n      isNullNombre: '',\n      isNullCelular: '',\n      isNullSexo: '',\n      alert_message: '',\n      nuevoContactoModal: !this.state.nuevoContactoModal,\n      datosNuevoContacto: {\n        Nombre: '',\n        Celular: '',\n        Sexo: ''\n      }\n    });\n  } //Método que niega el valor de la variable editarContactoModal inicializada en false, esto\n  //permite mostrar el Modal para la Modificación y\n  //se regresa el valor de la variable editarContactoModal a false cuando se pulsa el botón de cerrar y\n  //cuando se pulsa el botón de cancelar\n\n\n  toggleEditarContactoModal() {\n    //Este metodo se dispara cuando se cierra la ventana modal de editar, y cuando se pulsa el botón de Cancelar\n    // convierte el valor de la variable editarContactoModal a false\n    this.setState({\n      editarContactoModal: !this.state.editarContactoModal\n    });\n  }\n\n  validacionInput(e) {\n    if (e === 'true') {\n      return {\n        borderColor: '#dc3545'\n      };\n    }\n\n    if (e === 'false') {\n      return {\n        borderColor: '#28a745'\n      };\n    }\n\n    return {\n      borderColor: 'none'\n    };\n  }\n\n  validarContacto(contacto) {\n    var nombre = 'false',\n        celular = 'false',\n        sexo = 'false',\n        alert = '',\n        valAlert = false,\n        valContacto = true;\n\n    if (contacto.Nombre === '') {\n      nombre = 'true';\n      valAlert = true;\n    }\n\n    if (contacto.Celular === '') {\n      celular = 'true';\n      valAlert = true;\n    }\n\n    if (contacto.Sexo === '') {\n      sexo = 'true';\n      valAlert = true;\n    }\n\n    if (valAlert) {\n      alert = 'Introduzca la información que se le solicita';\n      valContacto = false;\n    }\n\n    this.setState({\n      isError: '',\n      isNullNombre: nombre,\n      isNullCelular: celular,\n      isNullSexo: sexo,\n      alert_message: alert\n    });\n    return valContacto;\n  } //Método que permite guardar los datos capturados en el modal de Alta\n\n\n  agregarContacto() {\n    if (this.validarContacto(this.state.datosNuevoContacto)) {\n      this.setState({\n        loading: true\n      });\n      axios.post('https://localhost:44386/api/Contactos', this.state.datosNuevoContacto).then(response => {\n        //Se setea la variable de state contactos, los simbolo {} permiten usarla para setearla por medio de let\n        //this.state contiene los contactos que se renderizaron en el Table\n        let contactos = this.state.contactos; //Se agrega al final el contacto que devolvio el metodo post de la api contactos\n\n        contactos.push(response.data); //Inicializa el estado de las variables nuevoContactoModal y el objeto datosNuevoContacto\n\n        this.setState({\n          loading: false,\n          contactos,\n          nuevoContactoModal: false,\n          datosNuevoContacto: {\n            Nombre: '',\n            Celular: '',\n            Sexo: ''\n          }\n        });\n      }).catch(error => {\n        //entra cuando los errores se propagan desde la base de datos, por ejemplo cuando la logitud de un\n        //  es superior al campo de la base de datos\n        this.setState({\n          loading: false,\n          isError: 'true',\n          alert_message: 'No se pudo agregar el contacto'\n        });\n      });\n    }\n  } //Método que permite guardar los datos capturados en el modal de Modificación\n\n\n  actualizarContacto() {\n    let _this$state$datosEdit = this.state.datosEditarContacto,\n        Id = _this$state$datosEdit.Id,\n        Nombre = _this$state$datosEdit.Nombre,\n        Celular = _this$state$datosEdit.Celular,\n        Sexo = _this$state$datosEdit.Sexo;\n\n    if (this.validarContacto(this.state.datosEditarContacto)) {\n      axios.put('https://localhost:44386/api/Contactos/' + this.state.datosEditarContacto.Id, {\n        Id,\n        Nombre,\n        Celular,\n        Sexo\n      }).then(response => {\n        //Se refresca el Table\n        this.refrescarContactos(); //Se inicializan la variable editarContactoModal y el objeto de datosEditarContacto\n\n        this.setState({\n          editarContactoModal: false,\n          datosEditarContacto: {\n            Id: '',\n            Nombre: '',\n            Celular: '',\n            Sexo: ''\n          }\n        });\n      }).catch(error => {\n        //entra cuando los errores se propagan desde la base de datos, por ejemplo cuando la logitud de un\n        //  es superior al campo de la base de datos\n        this.setState({\n          isError: 'true',\n          alert_message: 'No se pudo actualizar el contacto'\n        });\n      });\n    }\n  } //Método para eliminar un Contacto\n\n\n  eliminarContacto(id) {\n    confirmAlert({\n      customUI: ({\n        onClose\n      }) => {\n        return React.createElement(\"div\", {\n          className: \"custom-ui\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          className: \"glyphicon glyphicon-warning-sign\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 197\n          },\n          __self: this\n        }, React.createElement(FontAwesomeIcon, {\n          className: \"mr-3\",\n          icon: \"exclamation-triangle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198\n          },\n          __self: this\n        }), \"Esta seguro de eliminar el registro?\"), React.createElement(\"div\", {\n          className: \"btn-toolbar row\",\n          role: \"toolbar\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 200\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"col-sm-4\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 201\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"btn-group col-sm-4\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 202\n          },\n          __self: this\n        }, React.createElement(Button, {\n          color: \"secondary\",\n          size: \"sm\",\n          className: \"mr-3\",\n          onClick: onClose,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203\n          },\n          __self: this\n        }, React.createElement(FontAwesomeIcon, {\n          className: \"mr-1\",\n          icon: \"times\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204\n          },\n          __self: this\n        }), \"No\"), React.createElement(Button, {\n          color: \"primary\",\n          size: \"sm\",\n          className: \"btn btn-default \",\n          onClick: () => {\n            axios.delete('https://localhost:44386/api/Contactos/' + id).then(response => {\n              this.refrescarContactos();\n              onClose();\n            }).catch(error => {\n              //entra cuando los errores se propagan desde la base de datos, por ejemplo cuando la logitud de un\n              //  es superior al campo de la base de datos\n              this.setState({\n                isError: 'true',\n                alert_message: 'No se pudo eliminar el contacto'\n              });\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207\n          },\n          __self: this\n        }, React.createElement(FontAwesomeIcon, {\n          className: \"mr-1\",\n          icon: \"check\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222\n          },\n          __self: this\n        }), \"Si\")), React.createElement(\"div\", {\n          className: \"col-sm-4\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 226\n          },\n          __self: this\n        })));\n      }\n    });\n  }\n\n  refrescarContactos() {\n    axios.get('https://localhost:44386/api/Contactos').then(response => {\n      this.setState({\n        contactos: response.data\n      });\n    });\n  } //Nota: this.state mantiene el estado de las variables, es como un get pero para setear una  variables\n  // se debe ocupar\n  //Método para actualizar los datos\n\n\n  editarContacto(Id, Nombre, Celular, Sexo) {\n    //Por default la variable editarContactoModal es false pero se niega este valor seteando a verdadero,\n    // y de esta manera se consigue visualizar el modal de mdificación y setearle los datos a los controles\n    this.validarContacto({\n      Id,\n      Nombre,\n      Celular,\n      Sexo\n    });\n    this.setState({\n      datosEditarContacto: {\n        Id,\n        Nombre,\n        Celular,\n        Sexo\n      },\n      editarContactoModal: !this.state.editarContactoModal\n    });\n  }\n\n  validacionControles() {\n    if ((this.state.isNullNombre === 'true' || this.state.isNullCelular === 'true' || this.state.isNullSexo === 'true') && this.state.alert_message != '' || this.state.isError === 'true') return true;else return false;\n  }\n\n  render() {\n    const loading = this.state.loading;\n\n    if (this.state.loggedIn == false) {\n      return React.createElement(Redirect, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      });\n    } //Se setea a la variable local contactosReg el objeto contactos que se lleno al ejecutarse el método\n    //componentWillMount en automatico y se retorna las filas del Table más una columna con los botones de\n    //Editar y eliminar\n\n\n    let contactosReg = this.state.contactos.map(contacto => {\n      return React.createElement(\"tr\", {\n        key: contacto.Id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, contacto.Id), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }, contacto.Nombre), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, \" \", contacto.Celular), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }, \" \", contacto.Sexo), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"success\",\n        size: \"sm\",\n        className: \"mr-2\",\n        onClick: this.editarContacto.bind(this, contacto.Id, contacto.Nombre, contacto.Celular, contacto.Sexo),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }, \"Editar\"), React.createElement(Button, {\n        color: \"danger\",\n        size: \"sm\",\n        onClick: this.eliminarContacto.bind(this, contacto.Id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, \"Eliminar\")));\n    }); // El botón Agregar cambia a true la variable nuevoContactoModal por medio del metodo toggleNuevoContactoModal\n    //Modal para modificar datos se abre en automatico cuando su atributo isOpen cambia a verdadero por medio de la variable nuevoContactoModal\n    //y se cierra cuando la misma variable cambia a false al presionarse los botones cerrar (x) y cancelar\n    //Modal para modificar datos  se abre en automatico cuando su atributo isOpen cambia a verdadero por medio de la variable editarContactoModal\n    //y se cierra cuando la misma variable cambia a false al presionarse los botones de cerrar (x) y cancelar\n    //ModalHeader: Encabezado del Modal\n    //ModalBody: Contenedor de controles\n    //ModalFooter:  Pie del Modal, se utiliza comunmente para añadir botones\n    //FormGroup: Agrupador de Controles\n    //Input propiedad value : se le puede ligar una propiedad de un objeto state, y con el método onChange asignarle\n    //al value lo que se captura.\n    // let {datosNuevoContacto} = this.state;,  se setea el estado y se almacena lo que se captura\n    // datosNuevoContacto.Nombre = e.target.value;, se setea lo que se captura en el input en la propiedad que se indica\n    // this.setState({datosNuevoContacto});, se confirma el seteo de la propiedad del objeto\n    //<tbody>{contactosReg}</tbody>, la variable local contactosReg proporciona los filas del Table\n\n    return React.createElement(\"div\", {\n      id: \"divContactos\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, \"Aplicaci\\xF3n de Contactos\"), React.createElement(Button, {\n      className: \"my-3\",\n      color: \"primary\",\n      onClick: this.toggleNuevoContactoModal.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, \"Agregar\"), React.createElement(Modal, {\n      isOpen: this.state.nuevoContactoModal,\n      toggle: this.toggleNuevoContactoModal.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, React.createElement(ModalHeader, {\n      toggle: this.toggleNuevoContactoModal.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, \"Agregar un Contacto\"), React.createElement(ModalBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, this.validacionControles() ? React.createElement(AlertaError, {\n      mensaje: this.state.alert_message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }) : null, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"Nombre\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, \"Nombre\"), React.createElement(Input, {\n      id: \"Nombre\",\n      style: this.validacionInput(this.state.isNullNombre),\n      value: this.state.datosNuevoContacto.Nombre,\n      onChange: e => {\n        let datosNuevoContacto = this.state.datosNuevoContacto;\n        datosNuevoContacto.Nombre = e.target.value;\n        this.setState({\n          datosNuevoContacto\n        });\n      },\n      required: \"true\",\n      maxlength: \"100\",\n      onKeyUp: true,\n      onBlur: e => {\n        if (e.target.value == '') {\n          this.setState({\n            isNullNombre: 'true'\n          });\n        } else {\n          this.setState({\n            isNullNombre: 'false'\n          });\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"Celular\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, \"Celular\"), React.createElement(Input, {\n      id: \"Celular\",\n      style: this.validacionInput(this.state.isNullCelular),\n      value: this.state.datosNuevoContacto.Celular,\n      onChange: e => {\n        var regex = /[^+\\d]/g;\n        let datosNuevoContacto = this.state.datosNuevoContacto;\n        datosNuevoContacto.Celular = e.target.value.replace(regex, \"\");\n        this.setState({\n          datosNuevoContacto\n        });\n      },\n      required: \"true\",\n      onBlur: e => {\n        if (e.target.value == '') {\n          this.setState({\n            isNullCelular: 'true'\n          });\n        } else {\n          this.setState({\n            isNullCelular: 'false'\n          });\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"Sexo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, \"Sexo\"), React.createElement(Input, {\n      id: \"Sexo\",\n      style: this.validacionInput(this.state.isNullSexo),\n      value: this.state.datosNuevoContacto.Sexo,\n      onChange: e => {\n        let datosNuevoContacto = this.state.datosNuevoContacto;\n        datosNuevoContacto.Sexo = e.target.value;\n        this.setState({\n          datosNuevoContacto\n        });\n      },\n      required: \"true\",\n      maxlength: \"3\",\n      minlength: \"3\",\n      onBlur: e => {\n        if (e.target.value == '') {\n          this.setState({\n            isNullSexo: 'true'\n          });\n        } else {\n          this.setState({\n            isNullSexo: 'false'\n          });\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }))), React.createElement(ModalFooter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.agregarContacto.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }, loading ? React.createElement(FontAwesomeIcon, {\n      className: \"mr-2\",\n      icon: \"sync-alt\",\n      spin: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }) : React.createElement(FontAwesomeIcon, {\n      className: \"mr-2\",\n      icon: \"database\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }), \"Guardar\"), React.createElement(Button, {\n      color: \"secondary\",\n      onClick: this.toggleNuevoContactoModal.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      className: \"mr-1\",\n      icon: \"times\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }), \"Cancelar\"))), React.createElement(Modal, {\n      isOpen: this.state.editarContactoModal,\n      toggle: this.toggleEditarContactoModal.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }, React.createElement(ModalHeader, {\n      toggle: this.toggleEditarContactoModal.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }, \"Editar un Contacto\"), React.createElement(ModalBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }, this.validacionControles() ? React.createElement(AlertaError, {\n      mensaje: this.state.alert_message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }) : null, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"Nombre\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, \"Nombre\"), React.createElement(Input, {\n      id: \"Nombre\",\n      style: this.validacionInput(this.state.isNullNombre),\n      value: this.state.datosEditarContacto.Nombre,\n      onChange: e => {\n        let datosEditarContacto = this.state.datosEditarContacto;\n        datosEditarContacto.Nombre = e.target.value;\n        this.setState({\n          datosEditarContacto\n        });\n      },\n      required: \"true\",\n      maxlength: \"100\",\n      onBlur: e => {\n        if (e.target.value == '') {\n          this.setState({\n            isNullNombre: 'true'\n          });\n        } else {\n          this.setState({\n            isNullNombre: 'false'\n          });\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"Celular\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, \"Celular\"), React.createElement(Input, {\n      id: \"Celular\",\n      style: this.validacionInput(this.state.isNullCelular),\n      value: this.state.datosEditarContacto.Celular,\n      onChange: e => {\n        var regex = /[^+\\d]/g;\n        let datosEditarContacto = this.state.datosEditarContacto;\n        datosEditarContacto.Celular = e.target.value.replace(regex, \"\");\n        this.setState({\n          datosEditarContacto\n        });\n      },\n      required: \"true\",\n      onBlur: e => {\n        if (e.target.value == '') {\n          this.setState({\n            isNullCelular: 'true'\n          });\n        } else {\n          this.setState({\n            isNullCelular: 'false'\n          });\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"Sexo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }, \"Sexo\"), React.createElement(Input, {\n      id: \"Sexo\",\n      style: this.validacionInput(this.state.isNullSexo),\n      value: this.state.datosEditarContacto.Sexo,\n      onChange: e => {\n        let datosEditarContacto = this.state.datosEditarContacto;\n        datosEditarContacto.Sexo = e.target.value;\n        this.setState({\n          datosEditarContacto\n        });\n      },\n      required: \"true\",\n      maxlength: \"3\",\n      minlength: \"3\",\n      onBlur: e => {\n        if (e.target.value == '') {\n          this.setState({\n            isNullSexo: 'true'\n          });\n        } else {\n          this.setState({\n            isNullSexo: 'false'\n          });\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }))), React.createElement(ModalFooter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.actualizarContacto.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }, loading ? React.createElement(FontAwesomeIcon, {\n      className: \"mr-2\",\n      icon: \"sync-alt\",\n      spin: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }) : React.createElement(FontAwesomeIcon, {\n      className: \"mr-2\",\n      icon: \"database\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }), \"Guardar\"), React.createElement(Button, {\n      color: \"secondary\",\n      onClick: this.toggleEditarContactoModal.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      className: \"mr-1\",\n      icon: \"times\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }), \"Cancelar\"))), React.createElement(Table, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }, \"#\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }, \"Nombre\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }, \"Celular\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }, \"Sexo\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }, \"Acciones\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }, contactosReg))));\n  }\n\n}\n\nexport default Contactos;","map":{"version":3,"sources":["C:\\PROYECTOS\\VisualStudioNET\\WEBREACTCONTACTOS\\webreactcontactos\\src\\componentes\\Contactos.js"],"names":["React","Component","Label","FormGroup","Input","Modal","ModalHeader","ModalBody","ModalFooter","Table","Button","Link","Redirect","axios","confirmAlert","FontAwesomeIcon","AlertaError","Contactos","constructor","props","token","localStorage","getItem","loggedIn","state","loading","contactos","isError","isNullNombre","isNullCelular","isNullSexo","alert_message","datosNuevoContacto","Nombre","Celular","Sexo","datosEditarContacto","Id","nuevoContactoModal","editarContactoModal","componentWillMount","refrescarContactos","toggleNuevoContactoModal","setState","toggleEditarContactoModal","validacionInput","e","borderColor","validarContacto","contacto","nombre","celular","sexo","alert","valAlert","valContacto","agregarContacto","post","then","response","push","data","catch","error","actualizarContacto","put","eliminarContacto","id","customUI","onClose","delete","get","editarContacto","validacionControles","render","contactosReg","map","bind","target","value","regex","replace"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {Label, FormGroup, Input, Modal, ModalHeader, ModalBody, ModalFooter, Table, Button} from 'reactstrap';\r\nimport { Link, Redirect} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { confirmAlert } from 'react-confirm-alert';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport AlertaError from './AlertaError';\r\nimport 'react-confirm-alert/src/react-confirm-alert.css';\r\n\r\n/*import Navegacion from './Navegacion';*/\r\n//Una Clase que extiende del component de React se comvierte en una etiqueta html\r\nclass Contactos extends Component  {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    const token = localStorage.getItem(\"token\");\r\n    let loggedIn = true;\r\n    if (token==null){\r\n      loggedIn = false;\r\n    }\r\n    this.state = {\r\n    loading: false,\r\n    contactos: [],\r\n\t\tisError:'',\r\n\t\tisNullNombre: '',\r\n\t\tisNullCelular: '',\r\n\t\tisNullSexo: '',\r\n\t\talert_message:'',\r\n\t\tdatosNuevoContacto: {\r\n        Nombre: '',\r\n        Celular: '',\r\n        Sexo: ''\r\n      },\r\n      datosEditarContacto: {\r\n        Id: '',\r\n        Nombre: '',\r\n        Celular: '',\r\n        Sexo: ''\r\n      },\r\n      nuevoContactoModal: false,\r\n      editarContactoModal: false,\r\n      loggedIn\r\n    }\r\n  }\r\n  //Se declara en el objeto state las variables que mantendran el valor\r\n  //Contactos - Los datos que llenaran el Table\r\n  //datosNuevoContacto - Los datos para la Alta\r\n  //datosEditarContacto - Los datos para la modificación\r\n  //nuevoContactoModal - Para la visualización y cierre de la ventana modal de Alta\r\n //editarContactoModal - Para la visualización  y cierre de la ventana modal de modificación\r\n\r\n //Método que refrescara el Table\r\n  componentWillMount(){\r\n    this.refrescarContactos();\r\n  }\r\n//Método que niega el valor de la variable nuevoContactoModal inicializada en false, esto\r\n//permite mostrar el Modal para la Alta y inicializa los datos del objeto datosNuevoContacto, y\r\n//Se regresa el valor de la variable nuevoContactoModal a false cuando se pulsa el botón de cerrar y\r\n//cuando se pulsa el botón de cancelar\r\n  toggleNuevoContactoModal() {\r\n    this.setState({\r\n\t  isError:'',\r\n      isNullNombre:'',\r\n      isNullCelular:'',\r\n      isNullSexo:'',\r\n      alert_message:'',\r\n\t  nuevoContactoModal: !this.state.nuevoContactoModal,\r\n      datosNuevoContacto: {\r\n        Nombre: '',\r\n        Celular: '',\r\n        Sexo: ''\r\n      }\r\n    });\r\n  }\r\n  //Método que niega el valor de la variable editarContactoModal inicializada en false, esto\r\n  //permite mostrar el Modal para la Modificación y\r\n  //se regresa el valor de la variable editarContactoModal a false cuando se pulsa el botón de cerrar y\r\n  //cuando se pulsa el botón de cancelar\r\n  toggleEditarContactoModal() {\r\n    //Este metodo se dispara cuando se cierra la ventana modal de editar, y cuando se pulsa el botón de Cancelar\r\n    // convierte el valor de la variable editarContactoModal a false\r\n  this.setState({\r\n    editarContactoModal: !this.state.editarContactoModal\r\n  });\r\n}\r\nvalidacionInput(e){\r\n\r\n  if (e === 'true'){\r\n    return {borderColor: '#dc3545'}\r\n  }\r\n  if (e === 'false'){\r\n    return  {borderColor: '#28a745'}\r\n  }\r\n  return  {borderColor: 'none'};\r\n}\r\n\r\nvalidarContacto(contacto) {\r\n  var nombre='false', celular='false', sexo='false', alert='', valAlert=false, valContacto= true;\r\n\r\n  if (contacto.Nombre ==='')\r\n  {\r\n    nombre ='true';\r\n    valAlert=true;\r\n  }\r\n\r\n  if (contacto.Celular ==='')\r\n  {\r\n    celular = 'true';\r\n    valAlert=true;\r\n  }\r\n\r\n  if (contacto.Sexo ==='')\r\n  {\r\n    sexo = 'true';\r\n    valAlert=true;\r\n  }\r\n\r\n  if (valAlert) {\r\n    alert = 'Introduzca la información que se le solicita'\r\n    valContacto = false;\r\n  }\r\n  this.setState({\r\n    isError:'',\r\n    isNullNombre: nombre,\r\n    isNullCelular: celular,\r\n    isNullSexo: sexo,\r\n    alert_message: alert\r\n  });\r\n\r\n  return valContacto;\r\n}\r\n//Método que permite guardar los datos capturados en el modal de Alta\r\n  agregarContacto (){\r\n\tif (this.validarContacto(this.state.datosNuevoContacto)) {\r\n    this.setState({loading: true\r\n    });\r\n\t\taxios.post('https://localhost:44386/api/Contactos', this.state.datosNuevoContacto).then((response)=>{\r\n\t\t//Se setea la variable de state contactos, los simbolo {} permiten usarla para setearla por medio de let\r\n\t\t//this.state contiene los contactos que se renderizaron en el Table\r\n\t\t  let {contactos} = this.state;\r\n\t\t  //Se agrega al final el contacto que devolvio el metodo post de la api contactos\r\n\t\t  contactos.push(response.data);\r\n\t\t  //Inicializa el estado de las variables nuevoContactoModal y el objeto datosNuevoContacto\r\n\t\t  this.setState({loading: false, contactos, nuevoContactoModal:false, datosNuevoContacto: {\r\n\t\t\tNombre: '',\r\n\t\t\tCelular: '',\r\n\t\t\tSexo: ''\r\n\t\t  }});\r\n\t\t}).catch(error=>{\r\n        //entra cuando los errores se propagan desde la base de datos, por ejemplo cuando la logitud de un\r\n        //  es superior al campo de la base de datos\r\n        this.setState({\r\n          loading: false,\r\n          isError:'true',\r\n          alert_message: 'No se pudo agregar el contacto'\r\n        });\r\n      });\r\n\t   }\r\n  }\r\n\r\n//Método que permite guardar los datos capturados en el modal de Modificación\r\n  actualizarContacto()\r\n  {\r\n    let {Id, Nombre, Celular, Sexo} = this.state.datosEditarContacto;\r\n\tif (this.validarContacto(this.state.datosEditarContacto)) {\r\n\t\t  axios.put('https://localhost:44386/api/Contactos/' + this.state.datosEditarContacto.Id, {\r\n\t\t  Id, Nombre, Celular, Sexo\r\n\t\t\t}).then((response)=>{\r\n\t\t  //Se refresca el Table\r\n  \t\t  this.refrescarContactos();\r\n  \t\t  //Se inicializan la variable editarContactoModal y el objeto de datosEditarContacto\r\n  \t\t  this.setState({editarContactoModal: false, datosEditarContacto: {\r\n\r\n  \t\t\t\tId: '',\r\n  \t\t\t\tNombre: '',\r\n  \t\t\t\tCelular: '',\r\n  \t\t\t\tSexo: ''\r\n  \t\t\t}});\r\n\t\t   }).catch(error=>{\r\n        //entra cuando los errores se propagan desde la base de datos, por ejemplo cuando la logitud de un\r\n        //  es superior al campo de la base de datos\r\n        this.setState({\r\n          isError:'true',\r\n          alert_message: 'No se pudo actualizar el contacto'\r\n        });\r\n      });\r\n\r\n\t}\r\n  }\r\n\r\n//Método para eliminar un Contacto\r\n eliminarContacto(id){\r\n   confirmAlert({\r\n    customUI: ({ onClose }) => {\r\n      return (\r\n        <div className='custom-ui'>\r\n          <h1 className=\"glyphicon glyphicon-warning-sign\">\r\n            <FontAwesomeIcon className=\"mr-3\" icon=\"exclamation-triangle\" />\r\n            Esta seguro de eliminar el registro?</h1>\r\n          <div className=\"btn-toolbar row\" role=\"toolbar\">\r\n            <div className=\"col-sm-4\"></div>\r\n          <div className=\"btn-group col-sm-4\">\r\n              <Button color=\"secondary\" size=\"sm\" className=\"mr-3\" onClick={onClose}>\r\n                  <FontAwesomeIcon className=\"mr-1\" icon=\"times\" />\r\n                  No\r\n               </Button>\r\n              <Button color=\"primary\" size=\"sm\" className=\"btn btn-default \"\r\n                  onClick={() => {\r\n                    axios.delete('https://localhost:44386/api/Contactos/'+id).then((response)=>{\r\n\t\t\t\t\t\t              this.refrescarContactos();\r\n                          onClose();\r\n                     }).catch(error=>{\r\n                        //entra cuando los errores se propagan desde la base de datos, por ejemplo cuando la logitud de un\r\n                        //  es superior al campo de la base de datos\r\n                        this.setState({\r\n                          isError:'true',\r\n                          alert_message: 'No se pudo eliminar el contacto'\r\n                        });\r\n                      });\r\n                  }}\r\n                >\r\n                  <FontAwesomeIcon className=\"mr-1\" icon=\"check\" />\r\n                   Si\r\n              </Button>\r\n              </div>\r\n                <div className=\"col-sm-4\"></div>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n    });\r\n }\r\n refrescarContactos(){\r\n    axios.get('https://localhost:44386/api/Contactos').then((response)=>{\r\n      this.setState({\r\n        contactos: response.data\r\n      })\r\n    });\r\n  }\r\n\r\n  //Nota: this.state mantiene el estado de las variables, es como un get pero para setear una  variables\r\n  // se debe ocupar\r\n  //Método para actualizar los datos\r\n  editarContacto (Id, Nombre, Celular, Sexo)\r\n  {\r\n    //Por default la variable editarContactoModal es false pero se niega este valor seteando a verdadero,\r\n    // y de esta manera se consigue visualizar el modal de mdificación y setearle los datos a los controles\r\n\tthis.validarContacto({Id, Nombre, Celular, Sexo});\r\n    this.setState({\r\n     datosEditarContacto: {Id, Nombre, Celular, Sexo}, editarContactoModal:! this.state.editarContactoModal\r\n   });\r\n  }\r\n\r\n  validacionControles()\r\n  {\r\n    if (((this.state.isNullNombre ==='true'||this.state.isNullCelular ==='true'||this.state.isNullSexo ==='true') && (this.state.alert_message!='')) ||(this.state.isError=== 'true'))\r\n      return true;\r\n    else\r\n      return false;\r\n  }\r\n\r\n  render(){\r\n    const {loading} = this.state;\r\n    if(this.state.loggedIn==false)\r\n    {\r\n      return <Redirect  to=\"/\" />\r\n    }\r\n    //Se setea a la variable local contactosReg el objeto contactos que se lleno al ejecutarse el método\r\n    //componentWillMount en automatico y se retorna las filas del Table más una columna con los botones de\r\n    //Editar y eliminar\r\n    let contactosReg = this.state.contactos.map((contacto)=>{\r\n      return(\r\n        <tr key={contacto.Id}>\r\n          <td>{contacto.Id}</td>\r\n          <td>{contacto.Nombre}</td>\r\n          <td> {contacto.Celular}</td>\r\n          <td> {contacto.Sexo}</td>\r\n          <td>\r\n            <Button color=\"success\" size=\"sm\" className=\"mr-2\" onClick={this.editarContacto.bind(this, contacto.Id, contacto.Nombre, contacto.Celular, contacto.Sexo)}>Editar</Button>\r\n            <Button color=\"danger\" size=\"sm\" onClick={this.eliminarContacto.bind(this,contacto.Id)}>Eliminar</Button>\r\n          </td>\r\n        </tr>\r\n      )\r\n    });\r\n    // El botón Agregar cambia a true la variable nuevoContactoModal por medio del metodo toggleNuevoContactoModal\r\n\r\n    //Modal para modificar datos se abre en automatico cuando su atributo isOpen cambia a verdadero por medio de la variable nuevoContactoModal\r\n    //y se cierra cuando la misma variable cambia a false al presionarse los botones cerrar (x) y cancelar\r\n\r\n    //Modal para modificar datos  se abre en automatico cuando su atributo isOpen cambia a verdadero por medio de la variable editarContactoModal\r\n    //y se cierra cuando la misma variable cambia a false al presionarse los botones de cerrar (x) y cancelar\r\n\r\n    //ModalHeader: Encabezado del Modal\r\n    //ModalBody: Contenedor de controles\r\n    //ModalFooter:  Pie del Modal, se utiliza comunmente para añadir botones\r\n\r\n    //FormGroup: Agrupador de Controles\r\n    //Input propiedad value : se le puede ligar una propiedad de un objeto state, y con el método onChange asignarle\r\n    //al value lo que se captura.\r\n    // let {datosNuevoContacto} = this.state;,  se setea el estado y se almacena lo que se captura\r\n    // datosNuevoContacto.Nombre = e.target.value;, se setea lo que se captura en el input en la propiedad que se indica\r\n    // this.setState({datosNuevoContacto});, se confirma el seteo de la propiedad del objeto\r\n\r\n    //<tbody>{contactosReg}</tbody>, la variable local contactosReg proporciona los filas del Table\r\n\t  return (\r\n      <div id=\"divContactos\">\r\n\r\n      <div className=\"App container\">\r\n        <h2>Aplicación de Contactos</h2>\r\n\r\n        <Button  className=\"my-3\" color=\"primary\" onClick={this.toggleNuevoContactoModal.bind(this)}>Agregar</Button>\r\n        <Modal isOpen={this.state.nuevoContactoModal}  toggle={this.toggleNuevoContactoModal.bind(this)}>\r\n          <ModalHeader toggle={this.toggleNuevoContactoModal.bind(this)}>Agregar un Contacto</ModalHeader>\r\n          <ModalBody>\r\n            {this.validacionControles()?<AlertaError mensaje={this.state.alert_message} />:null}\r\n            <FormGroup>\r\n              <Label for=\"Nombre\">Nombre</Label>\r\n            <Input  id=\"Nombre\" style={this.validacionInput(this.state.isNullNombre)} value={this.state.datosNuevoContacto.Nombre} onChange={(e)=>{\r\n                let {datosNuevoContacto} = this.state;\r\n                datosNuevoContacto.Nombre = e.target.value;\r\n                this.setState({datosNuevoContacto});\r\n              }} required=\"true\" maxlength=\"100\" onKeyUp onBlur={(e)=>{\r\n                if (e.target.value == '')\r\n                  {\r\n                    this.setState({isNullNombre: 'true'});\r\n                  }else {\r\n                    this.setState({isNullNombre: 'false'});\r\n                  }\r\n                }}/>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"Celular\">Celular</Label>\r\n              <Input  id=\"Celular\" style={this.validacionInput(this.state.isNullCelular)} value={this.state.datosNuevoContacto.Celular} onChange={(e)=>{\r\n                var regex = /[^+\\d]/g;\r\n                let {datosNuevoContacto} = this.state;\r\n                datosNuevoContacto.Celular = e.target.value.replace(regex,\"\");\r\n                this.setState({datosNuevoContacto});\r\n              }} required = \"true\"  onBlur={(e)=>{\r\n                if (e.target.value == '')\r\n                  {\r\n                    this.setState({isNullCelular: 'true'});\r\n                  }else {\r\n                    this.setState({isNullCelular: 'false'});\r\n                  }\r\n                }}/>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"Sexo\">Sexo</Label>\r\n              <Input  id=\"Sexo\" style={this.validacionInput(this.state.isNullSexo)} value={this.state.datosNuevoContacto.Sexo} onChange={(e)=>{\r\n                let {datosNuevoContacto} = this.state;\r\n                datosNuevoContacto.Sexo = e.target.value;\r\n                this.setState({datosNuevoContacto});\r\n              }} required=\"true\" maxlength=\"3\" minlength=\"3\" onBlur={(e)=>{\r\n                if (e.target.value == '')\r\n                  {\r\n                    this.setState({isNullSexo: 'true'});\r\n                  }else {\r\n                    this.setState({isNullSexo: 'false'});\r\n                  }\r\n                }}/>\r\n            </FormGroup>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color=\"primary\" onClick={this.agregarContacto.bind(this)}>\r\n              {loading?<FontAwesomeIcon className=\"mr-2\" icon=\"sync-alt\" spin />: <FontAwesomeIcon className=\"mr-2\" icon=\"database\" />}\r\n              Guardar\r\n            </Button>\r\n            <Button color=\"secondary\" onClick={this.toggleNuevoContactoModal.bind(this)}>\r\n              <FontAwesomeIcon className=\"mr-1\" icon=\"times\" />\r\n              Cancelar\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n\r\n        <Modal isOpen={this.state.editarContactoModal}  toggle={this.toggleEditarContactoModal.bind(this)}>\r\n         <ModalHeader toggle={this.toggleEditarContactoModal.bind(this)}>Editar un Contacto</ModalHeader>\r\n         <ModalBody>\r\n           {this.validacionControles()?<AlertaError mensaje={this.state.alert_message} />:null}\r\n          <FormGroup>\r\n            <Label for=\"Nombre\">Nombre</Label>\r\n            <Input  id=\"Nombre\"  style={this.validacionInput(this.state.isNullNombre)} value={this.state.datosEditarContacto.Nombre} onChange={(e)=>{\r\n              let {datosEditarContacto} = this.state;\r\n              datosEditarContacto.Nombre = e.target.value;\r\n              this.setState({datosEditarContacto});\r\n            }} required=\"true\" maxlength=\"100\" onBlur={(e)=>{\r\n              if (e.target.value == '')\r\n                {\r\n                  this.setState({isNullNombre: 'true'});\r\n                }else {\r\n                  this.setState({isNullNombre: 'false'});\r\n                }\r\n              }}/>\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label for=\"Celular\">Celular</Label>\r\n            <Input  id=\"Celular\" style={this.validacionInput(this.state.isNullCelular)} value={this.state.datosEditarContacto.Celular} onChange={(e)=>{\r\n              var regex = /[^+\\d]/g;\r\n              let {datosEditarContacto} = this.state;\r\n              datosEditarContacto.Celular = e.target.value.replace(regex,\"\");\r\n              this.setState({datosEditarContacto});\r\n            }} required=\"true\" onBlur={(e)=>{\r\n              if (e.target.value == '')\r\n                {\r\n                  this.setState({isNullCelular: 'true'});\r\n                }else {\r\n                  this.setState({isNullCelular: 'false'});\r\n                }\r\n              }}/>\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label for=\"Sexo\">Sexo</Label>\r\n          <Input  id=\"Sexo\" style={this.validacionInput(this.state.isNullSexo)} value={this.state.datosEditarContacto.Sexo} onChange={(e)=>{\r\n              let {datosEditarContacto} = this.state;\r\n              datosEditarContacto.Sexo = e.target.value;\r\n              this.setState({datosEditarContacto});\r\n            }} required=\"true\"  maxlength=\"3\" minlength=\"3\" onBlur={(e)=>{\r\n              if (e.target.value == '')\r\n                {\r\n                  this.setState({isNullSexo: 'true'});\r\n                }else {\r\n                  this.setState({isNullSexo: 'false'});\r\n                }\r\n              }}/>\r\n          </FormGroup>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"primary\" onClick={this.actualizarContacto.bind(this)}>\r\n            {loading?<FontAwesomeIcon className=\"mr-2\" icon=\"sync-alt\" spin />: <FontAwesomeIcon className=\"mr-2\" icon=\"database\" />}\r\n            Guardar\r\n          </Button>\r\n          <Button color=\"secondary\" onClick={this.toggleEditarContactoModal.bind(this)}>\r\n            <FontAwesomeIcon className=\"mr-1\" icon=\"times\" />\r\n            Cancelar\r\n          </Button>\r\n        </ModalFooter>\r\n       </Modal>\r\n        <Table>\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Nombre</th>\r\n              <th>Celular</th>\r\n              <th>Sexo</th>\r\n              <th>Acciones</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {contactosReg}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Contactos;\r\n"]},"metadata":{},"sourceType":"module"}