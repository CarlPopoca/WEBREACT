{"ast":null,"code":"var _jsxFileName = \"C:\\\\PROYECTOS\\\\VisualStudioNET\\\\WEBREACTCONTACTOS\\\\webreactcontactos\\\\src\\\\componentes\\\\Contactos.js\";\nimport React, { Component } from 'react';\nimport { Label, FormGroup, Input, Modal, ModalHeader, ModalBody, ModalFooter, Table, Button } from 'reactstrap';\nimport { Link, Redirect } from 'react-router-dom';\nimport axios from 'axios';\n/*import Navegacion from './Navegacion';*/\n//Una Clase que extiende del component de React se comvierte en una etiqueta html\n\nclass Contactos extends Component {\n  constructor(props) {\n    super(props);\n    const token = localStorage.getItem(\"token\");\n    let loggedIn = true;\n\n    if (token == null) {\n      loggedIn = false;\n    }\n\n    this.state = {\n      contactos: [],\n      datosNuevoContacto: {\n        Nombre: '',\n        Celular: '',\n        Sexo: ''\n      },\n      datosEditarContacto: {\n        Id: '',\n        Nombre: '',\n        Celular: '',\n        Sexo: ''\n      },\n      nuevoContactoModal: false,\n      editarContactoModal: false,\n      loggedIn\n    };\n  } //Se declara en el objeto state las variables que mantendran el valor\n  //Contactos - Los datos que llenaran el Table\n  //datosNuevoContacto - Los datos para la Alta\n  //datosEditarContacto - Los datos para la modificación\n  //nuevoContactoModal - Para la visualización y cierre de la ventana modal de Alta\n  //editarContactoModal - Para la visualización  y cierre de la ventana modal de modificación\n  //Método que refrescara el Table\n\n\n  componentWillMount() {\n    this.refrescarContactos();\n  } //Método que niega el valor de la variable nuevoContactoModal inicializada en false, esto\n  //permite mostrar el Modal para la Alta y inicializa los datos del objeto datosNuevoContacto, y\n  //Se regresa el valor de la variable nuevoContactoModal a false cuando se pulsa el botón de cerrar y\n  //cuando se pulsa el botón de cancelar\n\n\n  toggleNuevoContactoModal() {\n    this.setState({\n      nuevoContactoModal: !this.state.nuevoContactoModal,\n      datosNuevoContacto: {\n        Nombre: '',\n        Celular: '',\n        Sexo: ''\n      }\n    });\n  } //Método que niega el valor de la variable editarContactoModal inicializada en false, esto\n  //permite mostrar el Modal para la Modificación y\n  //se regresa el valor de la variable editarContactoModal a false cuando se pulsa el botón de cerrar y\n  //cuando se pulsa el botón de cancelar\n\n\n  toggleEditarContactoModal() {\n    //Este metodo se dispara cuando se cierra la ventana modal de editar, y cuando se pulsa el botón de Cancelar\n    // convierte el valor de la variable editarContactoModal a false\n    this.setState({\n      editarContactoModal: !this.state.editarContactoModal\n    });\n  } //Método que permite guardar los datos capturados en el modal de Alta\n\n\n  agregarContacto() {\n    axios.post('https://localhost:44386/api/Contactos', this.state.datosNuevoContacto).then(response => {\n      //Se setea la variable de state contactos, los simbolo {} permiten usarla para setearla por medio de let\n      //this.state contiene los contactos que se renderizaron en el Table\n      let contactos = this.state.contactos; //Se agrega al final el contacto que devolvio el metodo post de la api contactos\n\n      contactos.push(response.data); //Inicializa el estado de las variables nuevoContactoModal y el objeto datosNuevoContacto\n\n      this.setState({\n        contactos,\n        nuevoContactoModal: false,\n        datosNuevoContacto: {\n          Nombre: '',\n          Celular: '',\n          Sexo: ''\n        }\n      });\n    });\n  } //Método que permite guardar los datos capturados en el modal de Modificación\n\n\n  actualizarContacto() {\n    let _this$state$datosEdit = this.state.datosEditarContacto,\n        Id = _this$state$datosEdit.Id,\n        Nombre = _this$state$datosEdit.Nombre,\n        Celular = _this$state$datosEdit.Celular,\n        Sexo = _this$state$datosEdit.Sexo;\n    axios.put('https://localhost:44386/api/Contactos/' + this.state.datosEditarContacto.Id, {\n      Id,\n      Nombre,\n      Celular,\n      Sexo\n    }).then(response => {\n      //Se refresca el Table\n      this.refrescarContactos(); //Se inicializan la variable editarContactoModal y el objeto de datosEditarContacto\n\n      this.setState({\n        editarContactoModal: false,\n        datosEditarContacto: {\n          Id: '',\n          Nombre: '',\n          Celular: '',\n          Sexo: ''\n        }\n      });\n    });\n  } //Método para eliminar un Contacto\n\n\n  eliminarContacto(id) {\n    axios.delete('https://localhost:44386/api/Contactos/' + id).then(response => {\n      this.refrescarContactos();\n    });\n  }\n\n  refrescarContactos() {\n    axios.get('https://localhost:44386/api/Contactos').then(response => {\n      this.setState({\n        contactos: response.data\n      });\n    });\n  } //Nota: this.state mantiene el estado de las variables, es como un get pero para setear una  variables se\n  // se debe ocupar\n  //Método para actualizar los datos\n\n\n  editarContacto(Id, Nombre, Celular, Sexo) {\n    //Por default la variable editarContactoModal es false pero se niega este valor seteando a verdadero,\n    // y de esta manera se consigue visualizar el modal de mdificación y setearle los datos a los controles\n    this.setState({\n      datosEditarContacto: {\n        Id,\n        Nombre,\n        Celular,\n        Sexo\n      },\n      editarContactoModal: !this.state.editarContactoModal\n    });\n  }\n\n  render() {\n    //Se setea a la variable local contactosReg el objeto contactos que se lleno al ejecutarse el método\n    //componentWillMount en automatico y se retorna las filas del Table más una columna con los botones de\n    //Editar y eliminar\n    let contactosReg = this.state.contactos.map(contacto => {\n      return React.createElement(\"tr\", {\n        key: contacto.Id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, contacto.Id), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, contacto.Nombre), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, \" \", contacto.Celular), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \" \", contacto.Sexo), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"success\",\n        size: \"sm\",\n        className: \"mr-2\",\n        onClick: this.editarContacto.bind(this, contacto.Id, contacto.Nombre, contacto.Celular, contacto.Sexo),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, \"Editar\"), React.createElement(Button, {\n        color: \"danger\",\n        size: \"sm\",\n        onClick: this.eliminarContacto.bind(this, contacto.Id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \"Eliminar\")));\n    }); // El botón Agregar cambia a true la variable nuevoContactoModal por medio del metodo toggleNuevoContactoModal\n    //Modal para modificar datos se abre en automatico cuando su atributo isOpen cambia a verdadero por medio de la variable nuevoContactoModal\n    //y se cierra cuando la misma variable cambia a false al presionarse los botones cerrar (x) y cancelar\n    //Modal para modificar datos  se abre en automatico cuando su atributo isOpen cambia a verdadero por medio de la variable editarContactoModal\n    //y se cierra cuando la misma variable cambia a false al presionarse los botones de cerrar (x) y cancelar\n    //ModalHeader: Encabezado del Modal\n    //ModalBody: Contenedor de controles\n    //ModalFooter:  Pie del Modal, se utiliza comunmente para añadir botones\n    //FormGroup: Agrupador de Controles\n    //Input propiedad value : se le puede ligar una propiedad de un objeto state, y con el método onChange asignarle\n    //al value lo que se captura.\n    // let {datosNuevoContacto} = this.state;,  se setea el estado y se almacena lo que se captura\n    // datosNuevoContacto.Nombre = e.target.value;, se setea lo que se captura en el input en la propiedad que se indica\n    // this.setState({datosNuevoContacto});, se confirma el seteo de la propiedad del objeto\n    //<tbody>{contactosReg}</tbody>, la variable local contactosReg proporciona los filas del Table\n\n    return React.createElement(\"div\", {\n      id: \"divContactos\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"Aplicaci\\xF3n de Contactos\"), React.createElement(Button, {\n      className: \"my-3\",\n      color: \"primary\",\n      onClick: this.toggleNuevoContactoModal.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"Agregar\"), React.createElement(Modal, {\n      isOpen: this.state.nuevoContactoModal,\n      toggle: this.toggleNuevoContactoModal.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(ModalHeader, {\n      toggle: this.toggleNuevoContactoModal.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"Agregar un Contacto\"), React.createElement(ModalBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"Nombre\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"Nombre\"), React.createElement(Input, {\n      id: \"Nombre\",\n      value: this.state.datosNuevoContacto.Nombre,\n      onChange: e => {\n        let datosNuevoContacto = this.state.datosNuevoContacto;\n        datosNuevoContacto.Nombre = e.target.value;\n        this.setState({\n          datosNuevoContacto\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"Celular\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"Celular\"), React.createElement(Input, {\n      id: \"Celular\",\n      value: this.state.datosNuevoContacto.Celular,\n      onChange: e => {\n        let datosNuevoContacto = this.state.datosNuevoContacto;\n        datosNuevoContacto.Celular = e.target.value;\n        this.setState({\n          datosNuevoContacto\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"Sexo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, \"Sexo\"), React.createElement(Input, {\n      id: \"Sexo\",\n      value: this.state.datosNuevoContacto.Sexo,\n      onChange: e => {\n        let datosNuevoContacto = this.state.datosNuevoContacto;\n        datosNuevoContacto.Sexo = e.target.value;\n        this.setState({\n          datosNuevoContacto\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }))), React.createElement(ModalFooter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.agregarContacto.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, \"Guardar\"), ' ', React.createElement(Button, {\n      color: \"secondary\",\n      onClick: this.toggleNuevoContactoModal.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, \"Cancelar\"))), React.createElement(Modal, {\n      isOpen: this.state.editarContactoModal,\n      toggle: this.toggleEditarContactoModal.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(ModalHeader, {\n      toggle: this.toggleEditarContactoModal.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"Editar un Contacto\"), React.createElement(ModalBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"Nombre\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, \"Nombre\"), React.createElement(Input, {\n      id: \"Nombre\",\n      value: this.state.datosEditarContacto.Nombre,\n      onChange: e => {\n        let datosEditarContacto = this.state.datosEditarContacto;\n        datosEditarContacto.Nombre = e.target.value;\n        this.setState({\n          datosEditarContacto\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"Celular\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, \"Celular\"), React.createElement(Input, {\n      id: \"Celular\",\n      value: this.state.datosEditarContacto.Celular,\n      onChange: e => {\n        let datosEditarContacto = this.state.datosEditarContacto;\n        datosEditarContacto.Celular = e.target.value;\n        this.setState({\n          datosEditarContacto\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"Sexo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, \"Sexo\"), React.createElement(Input, {\n      id: \"Sexo\",\n      value: this.state.datosEditarContacto.Sexo,\n      onChange: e => {\n        let datosEditarContacto = this.state.datosEditarContacto;\n        datosEditarContacto.Sexo = e.target.value;\n        this.setState({\n          datosEditarContacto\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }))), React.createElement(ModalFooter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.actualizarContacto.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, \"Guardar\"), ' ', React.createElement(Button, {\n      color: \"secondary\",\n      onClick: this.toggleEditarContactoModal.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, \"Cancelar\"))), React.createElement(Table, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, \"#\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, \"Nombre\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, \"Celular\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, \"Sexo\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, \"Acciones\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, contactosReg))));\n  }\n\n}\n\nexport default Contactos;","map":{"version":3,"sources":["C:\\PROYECTOS\\VisualStudioNET\\WEBREACTCONTACTOS\\webreactcontactos\\src\\componentes\\Contactos.js"],"names":["React","Component","Label","FormGroup","Input","Modal","ModalHeader","ModalBody","ModalFooter","Table","Button","Link","Redirect","axios","Contactos","constructor","props","token","localStorage","getItem","loggedIn","state","contactos","datosNuevoContacto","Nombre","Celular","Sexo","datosEditarContacto","Id","nuevoContactoModal","editarContactoModal","componentWillMount","refrescarContactos","toggleNuevoContactoModal","setState","toggleEditarContactoModal","agregarContacto","post","then","response","push","data","actualizarContacto","put","eliminarContacto","id","delete","get","editarContacto","render","contactosReg","map","contacto","bind","e","target","value"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {Label, FormGroup, Input, Modal, ModalHeader, ModalBody, ModalFooter, Table, Button} from 'reactstrap';\r\nimport { Link, Redirect} from 'react-router-dom';\r\nimport axios from 'axios';\r\n/*import Navegacion from './Navegacion';*/\r\n//Una Clase que extiende del component de React se comvierte en una etiqueta html\r\nclass Contactos extends Component  {\r\n  constructor(props){\r\n    super(props);\r\n    const token = localStorage.getItem(\"token\");\r\n    let loggedIn = true;\r\n    if (token==null){\r\n      loggedIn = false;\r\n    }\r\n    this.state = {\r\n      contactos: [],\r\n      datosNuevoContacto: {\r\n        Nombre: '',\r\n        Celular: '',\r\n        Sexo: ''\r\n      },\r\n      datosEditarContacto: {\r\n        Id: '',\r\n        Nombre: '',\r\n        Celular: '',\r\n        Sexo: ''\r\n      },\r\n      nuevoContactoModal: false,\r\n      editarContactoModal: false,\r\n      loggedIn\r\n    }\r\n  }\r\n  //Se declara en el objeto state las variables que mantendran el valor\r\n  //Contactos - Los datos que llenaran el Table\r\n  //datosNuevoContacto - Los datos para la Alta\r\n  //datosEditarContacto - Los datos para la modificación\r\n  //nuevoContactoModal - Para la visualización y cierre de la ventana modal de Alta\r\n //editarContactoModal - Para la visualización  y cierre de la ventana modal de modificación\r\n\r\n //Método que refrescara el Table\r\n  componentWillMount(){\r\n    this.refrescarContactos();\r\n  }\r\n//Método que niega el valor de la variable nuevoContactoModal inicializada en false, esto\r\n//permite mostrar el Modal para la Alta y inicializa los datos del objeto datosNuevoContacto, y\r\n//Se regresa el valor de la variable nuevoContactoModal a false cuando se pulsa el botón de cerrar y\r\n//cuando se pulsa el botón de cancelar\r\n  toggleNuevoContactoModal() {\r\n    this.setState({\r\n      nuevoContactoModal: !this.state.nuevoContactoModal,\r\n      datosNuevoContacto: {\r\n        Nombre: '',\r\n        Celular: '',\r\n        Sexo: ''\r\n      }\r\n    });\r\n  }\r\n  //Método que niega el valor de la variable editarContactoModal inicializada en false, esto\r\n  //permite mostrar el Modal para la Modificación y\r\n  //se regresa el valor de la variable editarContactoModal a false cuando se pulsa el botón de cerrar y\r\n  //cuando se pulsa el botón de cancelar\r\n  toggleEditarContactoModal() {\r\n    //Este metodo se dispara cuando se cierra la ventana modal de editar, y cuando se pulsa el botón de Cancelar\r\n    // convierte el valor de la variable editarContactoModal a false\r\n  this.setState({\r\n    editarContactoModal: !this.state.editarContactoModal\r\n  });\r\n}\r\n//Método que permite guardar los datos capturados en el modal de Alta\r\n  agregarContacto (){\r\n\r\n    axios.post('https://localhost:44386/api/Contactos', this.state.datosNuevoContacto).then((response)=>{\r\n    //Se setea la variable de state contactos, los simbolo {} permiten usarla para setearla por medio de let\r\n    //this.state contiene los contactos que se renderizaron en el Table\r\n    let {contactos} = this.state;\r\n    //Se agrega al final el contacto que devolvio el metodo post de la api contactos\r\n    contactos.push(response.data);\r\n    //Inicializa el estado de las variables nuevoContactoModal y el objeto datosNuevoContacto\r\n    this.setState({contactos, nuevoContactoModal:false, datosNuevoContacto: {\r\n      Nombre: '',\r\n      Celular: '',\r\n      Sexo: ''\r\n    }});\r\n\r\n    });\r\n  }\r\n\r\n//Método que permite guardar los datos capturados en el modal de Modificación\r\n  actualizarContacto()\r\n  {\r\n    let {Id, Nombre, Celular, Sexo} = this.state.datosEditarContacto;\r\n\r\n      axios.put('https://localhost:44386/api/Contactos/' + this.state.datosEditarContacto.Id, {\r\n      Id, Nombre, Celular, Sexo\r\n    }).then((response)=>{\r\n      //Se refresca el Table\r\n      this.refrescarContactos();\r\n      //Se inicializan la variable editarContactoModal y el objeto de datosEditarContacto\r\n      this.setState({editarContactoModal: false, datosEditarContacto: {\r\n            Id: '',\r\n            Nombre: '',\r\n            Celular: '',\r\n            Sexo: ''\r\n          }});\r\n    });\r\n  }\r\n//Método para eliminar un Contacto\r\n eliminarContacto(id){\r\n   axios.delete('https://localhost:44386/api/Contactos/'+id).then((response)=>{\r\n     this.refrescarContactos();\r\n   });\r\n }\r\n  refrescarContactos(){\r\n\r\n\r\n    axios.get('https://localhost:44386/api/Contactos').then((response)=>{\r\n      this.setState({\r\n            contactos: response.data\r\n      })\r\n    });\r\n  }\r\n\r\n  //Nota: this.state mantiene el estado de las variables, es como un get pero para setear una  variables se\r\n  // se debe ocupar\r\n\r\n  //Método para actualizar los datos\r\n  editarContacto (Id, Nombre, Celular, Sexo)\r\n  {\r\n    //Por default la variable editarContactoModal es false pero se niega este valor seteando a verdadero,\r\n    // y de esta manera se consigue visualizar el modal de mdificación y setearle los datos a los controles\r\n    this.setState({\r\n     datosEditarContacto: {Id, Nombre, Celular, Sexo}, editarContactoModal:! this.state.editarContactoModal\r\n   });\r\n  }\r\n\r\n  render(){\r\n\r\n    //Se setea a la variable local contactosReg el objeto contactos que se lleno al ejecutarse el método\r\n    //componentWillMount en automatico y se retorna las filas del Table más una columna con los botones de\r\n    //Editar y eliminar\r\n    let contactosReg = this.state.contactos.map((contacto)=>{\r\n\r\n      return(\r\n        <tr key={contacto.Id}>\r\n          <td>{contacto.Id}</td>\r\n          <td>{contacto.Nombre}</td>\r\n          <td> {contacto.Celular}</td>\r\n          <td> {contacto.Sexo}</td>\r\n          <td>\r\n            <Button color=\"success\" size=\"sm\" className=\"mr-2\" onClick={this.editarContacto.bind(this, contacto.Id, contacto.Nombre, contacto.Celular, contacto.Sexo)}>Editar</Button>\r\n            <Button color=\"danger\" size=\"sm\" onClick={this.eliminarContacto.bind(this,contacto.Id)}>Eliminar</Button>\r\n          </td>\r\n        </tr>\r\n      )\r\n    });\r\n\r\n    // El botón Agregar cambia a true la variable nuevoContactoModal por medio del metodo toggleNuevoContactoModal\r\n\r\n    //Modal para modificar datos se abre en automatico cuando su atributo isOpen cambia a verdadero por medio de la variable nuevoContactoModal\r\n    //y se cierra cuando la misma variable cambia a false al presionarse los botones cerrar (x) y cancelar\r\n\r\n    //Modal para modificar datos  se abre en automatico cuando su atributo isOpen cambia a verdadero por medio de la variable editarContactoModal\r\n    //y se cierra cuando la misma variable cambia a false al presionarse los botones de cerrar (x) y cancelar\r\n\r\n    //ModalHeader: Encabezado del Modal\r\n    //ModalBody: Contenedor de controles\r\n    //ModalFooter:  Pie del Modal, se utiliza comunmente para añadir botones\r\n\r\n    //FormGroup: Agrupador de Controles\r\n    //Input propiedad value : se le puede ligar una propiedad de un objeto state, y con el método onChange asignarle\r\n    //al value lo que se captura.\r\n    // let {datosNuevoContacto} = this.state;,  se setea el estado y se almacena lo que se captura\r\n    // datosNuevoContacto.Nombre = e.target.value;, se setea lo que se captura en el input en la propiedad que se indica\r\n    // this.setState({datosNuevoContacto});, se confirma el seteo de la propiedad del objeto\r\n\r\n    //<tbody>{contactosReg}</tbody>, la variable local contactosReg proporciona los filas del Table\r\n    return (\r\n      <div id=\"divContactos\">\r\n\r\n      <div className=\"App container\">\r\n        <h1>Aplicación de Contactos</h1>\r\n\r\n      <Button  className=\"my-3\" color=\"primary\" onClick={this.toggleNuevoContactoModal.bind(this)}>Agregar</Button>\r\n      <Modal isOpen={this.state.nuevoContactoModal}  toggle={this.toggleNuevoContactoModal.bind(this)}>\r\n        <ModalHeader toggle={this.toggleNuevoContactoModal.bind(this)}>Agregar un Contacto</ModalHeader>\r\n        <ModalBody>\r\n          <FormGroup>\r\n            <Label for=\"Nombre\">Nombre</Label>\r\n            <Input  id=\"Nombre\" value={this.state.datosNuevoContacto.Nombre} onChange={(e)=>{\r\n              let {datosNuevoContacto} = this.state;\r\n              datosNuevoContacto.Nombre = e.target.value;\r\n              this.setState({datosNuevoContacto});\r\n            }}/>\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label for=\"Celular\">Celular</Label>\r\n            <Input  id=\"Celular\" value={this.state.datosNuevoContacto.Celular} onChange={(e)=>{\r\n              let {datosNuevoContacto} = this.state;\r\n              datosNuevoContacto.Celular = e.target.value;\r\n              this.setState({datosNuevoContacto});\r\n            }}/>\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label for=\"Sexo\">Sexo</Label>\r\n            <Input  id=\"Sexo\" value={this.state.datosNuevoContacto.Sexo} onChange={(e)=>{\r\n              let {datosNuevoContacto} = this.state;\r\n              datosNuevoContacto.Sexo = e.target.value;\r\n              this.setState({datosNuevoContacto});\r\n            }}/>\r\n          </FormGroup>\r\n        </ModalBody>\r\n       <ModalFooter>\r\n         <Button color=\"primary\" onClick={this.agregarContacto.bind(this)}>Guardar</Button>{' '}\r\n         <Button color=\"secondary\" onClick={this.toggleNuevoContactoModal.bind(this)}>Cancelar</Button>\r\n       </ModalFooter>\r\n      </Modal>\r\n\r\n      <Modal isOpen={this.state.editarContactoModal}  toggle={this.toggleEditarContactoModal.bind(this)}>\r\n       <ModalHeader toggle={this.toggleEditarContactoModal.bind(this)}>Editar un Contacto</ModalHeader>\r\n       <ModalBody>\r\n        <FormGroup>\r\n          <Label for=\"Nombre\">Nombre</Label>\r\n          <Input  id=\"Nombre\" value={this.state.datosEditarContacto.Nombre} onChange={(e)=>{\r\n            let {datosEditarContacto} = this.state;\r\n            datosEditarContacto.Nombre = e.target.value;\r\n            this.setState({datosEditarContacto});\r\n          }}/>\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"Celular\">Celular</Label>\r\n          <Input  id=\"Celular\" value={this.state.datosEditarContacto.Celular} onChange={(e)=>{\r\n            let {datosEditarContacto} = this.state;\r\n            datosEditarContacto.Celular = e.target.value;\r\n            this.setState({datosEditarContacto});\r\n          }}/>\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"Sexo\">Sexo</Label>\r\n          <Input  id=\"Sexo\" value={this.state.datosEditarContacto.Sexo} onChange={(e)=>{\r\n            let {datosEditarContacto} = this.state;\r\n            datosEditarContacto.Sexo = e.target.value;\r\n            this.setState({datosEditarContacto});\r\n          }}/>\r\n        </FormGroup>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button color=\"primary\" onClick={this.actualizarContacto.bind(this)}>Guardar</Button>{' '}\r\n        <Button color=\"secondary\" onClick={this.toggleEditarContactoModal.bind(this)}>Cancelar</Button>\r\n      </ModalFooter>\r\n     </Modal>\r\n\r\n        <Table>\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Nombre</th>\r\n              <th>Celular</th>\r\n              <th>Sexo</th>\r\n              <th>Acciones</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {contactosReg}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Contactos;\r\n"]},"metadata":{},"sourceType":"module"}